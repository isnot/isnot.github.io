<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isnot N3</title>
  
  <subtitle>いしだなおと の、ブログ的な。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pages.isnot.jp/"/>
  <updated>2019-05-06T14:11:11.564Z</updated>
  <id>https://pages.isnot.jp/</id>
  
  <author>
    <name>isnot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 内部探訪 (6) DevToolsを使ったデバッグ</title>
    <link href="https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-6/"/>
    <id>https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-6/</id>
    <published>2019-05-06T14:08:08.000Z</published>
    <updated>2019-05-06T14:11:11.564Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><p>恥ずかしながらデバッカーを使い慣れておらず、こういった実行時コンテキストの解析に、手間取っていました。<br>今回は、DevToolsプロトコルを使って解析してみよう。</p><a id="more"></a><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;path-to-your-blog-dir&gt;</span><br><span class="line">$ hexo clean</span><br><span class="line">$ node --inspect-brk node_modules/hexo-cli/bin/hexo g --debug</span><br></pre></td></tr></tbody></table></figure><p>このようにinspectを有効化してから、ブラウザ（Chromiumを利用）で<code>chrome://inspect</code>を開き、<code>Remote Target</code>の中に現れる<code>inspect this</code>から、デバッカーを開始する。</p><p>これだと、デバッカーに馴れていない私にとっては、見たいところにたどり着くまでに手間取ってしまった。</p><p>そこで、自身で開発中のプラグインの中に、任意のブレークポイントをあらかじめ挿入してしまう。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></tbody></table></figure><p>そして</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ node --inspect node_modules/hexo-cli/bin/hexo g --debug</span><br></pre></td></tr></tbody></table></figure><p><strong>-brk</strong> の有無が異なる点に注意。</p><p>これで、ようやく調査がやりやすくなりました。<br>デバッカーの使い方は、これが詳しい。</p><p><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/step-code?hl=ja" target="_blank" rel="noopener">コードをステップ実行する方法 | Tools for Web Developers | Google Developers</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;p&gt;恥ずかしながらデバッカーを使い慣れておらず、こういった実行時コンテキストの解析に、手間取っていました。&lt;br&gt;今回は、DevToolsプロトコルを使って解析してみよう。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://pages.isnot.jp/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="javascript" scheme="https://pages.isnot.jp/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内部探訪 (5) ライフサイクル</title>
    <link href="https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-5/"/>
    <id>https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-5/</id>
    <published>2019-05-06T07:15:43.000Z</published>
    <updated>2019-05-06T13:48:32.083Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><p>Hexoでは、なにはともあれ、コマンドライン（インタラクティブなコマンド・シェル、例えばBash）環境において、<code>hexo</code>コマンドを利用することで処理が始まる。</p><h2 id="hexo-cliにある、コマンドラインの処理が始まる場所"><a href="#hexo-cliにある、コマンドラインの処理が始まる場所" class="headerlink" title="hexo-cliにある、コマンドラインの処理が始まる場所"></a>hexo-cliにある、コマンドラインの処理が始まる場所</h2><ul><li><a href="https://github.com/hexojs/hexo-cli/blob/master/lib/hexo.js" target="_blank" rel="noopener">hexo-cli/lib/hexo.js</a></li><li>hexo-cli/lib/context.js</li><li>hexo-cli/lib/extend/console.js</li></ul><h2 id="Hexo-オブジェクト"><a href="#Hexo-オブジェクト" class="headerlink" title="Hexo オブジェクト"></a>Hexo オブジェクト</h2><ul><li><a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js" target="_blank" rel="noopener">hexo/lib/hexo/index.js</a></li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link crossorigin=&quot;anonymous&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; href=&quot;/css/google_photos_album.css&quot; /&gt;&lt;div class=&quot;article-gallery&quot;&gt;&lt;p&gt;Hexoでは、な
      
    
    </summary>
    
      <category term="hexo" scheme="https://pages.isnot.jp/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="javascript" scheme="https://pages.isnot.jp/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内部探訪 (4) プラグインのロード</title>
    <link href="https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-4/"/>
    <id>https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-4/</id>
    <published>2019-05-05T18:36:30.000Z</published>
    <updated>2019-05-06T13:49:00.078Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><p><a href="https://github.com/hexojs/hexo/blob/master/lib/hexo/load_plugins.js" target="_blank" rel="noopener">hexo/lib/hexo/load_plugins.js</a>に書いてある。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link crossorigin=&quot;anonymous&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; href=&quot;/css/google_photos_album.css&quot; /&gt;&lt;div class=&quot;article-gallery&quot;&gt;&lt;p&gt;&lt;a href=
      
    
    </summary>
    
      <category term="hexo" scheme="https://pages.isnot.jp/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="javascript" scheme="https://pages.isnot.jp/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内部探訪 (3) コンテキストとしての&quot;hexo&quot;変数</title>
    <link href="https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-3/"/>
    <id>https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-3/</id>
    <published>2019-05-05T15:03:00.000Z</published>
    <updated>2019-05-06T14:09:30.840Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><h2 id="調査の開始にあたって"><a href="#調査の開始にあたって" class="headerlink" title="調査の開始にあたって"></a>調査の開始にあたって</h2><p>プラグイン（さしあたりTagプラグインを想定）の実装中にて参照できる変数やオブジェクトを、調べてまとめよう。</p><p><a href="https://nodejs.org/ja/docs/" target="_blank" rel="noopener">ドキュメント | Node.js</a>、 <a href="https://nodejs.org/api/process.html" target="_blank" rel="noopener">Process</a> 等もためになる。</p><a id="more"></a><p>ところで、Node.jsでは、グローバルな空間を参照するためのキーワードがある。<br><code>global</code>である。</p><p>また、次のようなやり方で参照する方法もあるようだ。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> { inspect } = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> g = <span class="built_in">Function</span>(<span class="string">'return this'</span>)();</span><br><span class="line"><span class="built_in">console</span>.log(inspect(g, { <span class="attr">depth</span>: <span class="number">0</span> }));</span><br></pre></td></tr></tbody></table></figure><p>これらを駆使しつつ、Hexoの場合には、私が見たところほとんど全ての場所で、<code>hexo</code>という、トップレベルの変数が見えるので、これを足がかりにしたい。<br>また、他にも使える要素がもしあるなら、確かめたい。</p><h2 id="グローバル汚染はなかった"><a href="#グローバル汚染はなかった" class="headerlink" title="グローバル汚染はなかった"></a>グローバル汚染はなかった</h2><p>調査を進めてから理解できたことだが、Hexoではグローバル変数、またはグローバル・オブジェクトを使ってはいない。</p><p>何らかのプラグインで、グローバルを意図して使うのならばともかくとして、少なくともHexoの本体と言える範囲や、純正／バンドルされた各プラグインでは、グローバル変数は使わないようだ。いわゆる「グローバル汚染」はない。</p><p>プラグイン含めて各所で見かける<code>hexo</code>という変数が存在し、トップレベルの階層にあるし、自ら呼び出しているわけでもないので、私は当初これがグローバル変数なのかな？と勘違いしていました。</p><p>しかしこれは、実際には、<code>module.exports</code>の仕組みによって与えられたもので、各モジュール（概ね各jsファイルに相当）毎にそれぞれエクスポートされていました。</p><p>私はこれまで<code>module.exports</code>について理解していないままでしたが、今回勉強になりました。</p><p>（調査中）</p><p>Hexoオブジェクト<br></p><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  _events: [Object: null prototype] {},</span><br><span class="line">  _eventsCount: 0,</span><br><span class="line">  _maxListeners: undefined,</span><br><span class="line">  base_dir: '/home/naoto/www/MyBlog/',</span><br><span class="line">  public_dir: '/home/naoto/www/MyBlog/public/',</span><br><span class="line">  source_dir: '/home/naoto/www/MyBlog/source/',</span><br><span class="line">  plugin_dir: '/home/naoto/www/MyBlog/node_modules/',</span><br><span class="line">  script_dir: '/home/naoto/www/MyBlog/scripts/',</span><br><span class="line">  scaffold_dir: '/home/naoto/www/MyBlog/scaffolds/',</span><br><span class="line">  theme_dir: '/home/naoto/www/MyBlog/themes/stage/',</span><br><span class="line">  theme_script_dir: '/home/naoto/www/MyBlog/themes/stage/scripts/',</span><br><span class="line">  env: [Object],</span><br><span class="line">  extend: [Object],</span><br><span class="line">  config: [Object],</span><br><span class="line">  log: [Logger],</span><br><span class="line">  render: [Render],</span><br><span class="line">  route: [Router],</span><br><span class="line">  post: [Post],</span><br><span class="line">  scaffold: [Scaffold],</span><br><span class="line">  _dbLoaded: true,</span><br><span class="line">  _isGenerating: true,</span><br><span class="line">  database: [Database],</span><br><span class="line">  config_path: '/home/naoto/www/MyBlog/_config.yml',</span><br><span class="line">  source: [Source],</span><br><span class="line">  theme: [Theme],</span><br><span class="line">  locals: [Locals]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="（進捗途中）"><a href="#（進捗途中）" class="headerlink" title="（進捗途中）"></a>（進捗途中）</h2></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;h2 id=&quot;調査の開始にあたって&quot;&gt;&lt;a href=&quot;#調査の開始にあたって&quot; class=&quot;headerlink&quot; title=&quot;調査の開始にあたって&quot;&gt;&lt;/a&gt;調査の開始にあたって&lt;/h2&gt;&lt;p&gt;プラグイン（さしあたりTagプラグインを想定）の実装中にて参照できる変数やオブジェクトを、調べてまとめよう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/ja/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ドキュメント | Node.js&lt;/a&gt;、 &lt;a href=&quot;https://nodejs.org/api/process.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Process&lt;/a&gt; 等もためになる。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://pages.isnot.jp/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="javascript" scheme="https://pages.isnot.jp/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内部探訪 (2) 準備 npm linkメモ</title>
    <link href="https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-2/"/>
    <id>https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-2/</id>
    <published>2019-05-05T15:02:00.000Z</published>
    <updated>2019-05-05T18:40:15.035Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><h2 id="npm-linkを使いこなすには"><a href="#npm-linkを使いこなすには" class="headerlink" title="npm linkを使いこなすには"></a>npm linkを使いこなすには</h2><p><a href="https://docs.npmjs.com/cli/link.html" target="_blank" rel="noopener">npm link</a>という、ありがたい仕組みがあって、非公開のモジュール（または開発中のバージョン）を、node_modulesの中に配置することができる。<br>基本的には、シンボリック・リンクである。</p><p>ここまでは、すぐに把握できたけど、実はうまく動作させるための、さらなる条件があった。</p><a id="more"></a><p>モジュールを読み込む側と、読み込まれる側のモジュールが、ファイルシステム上で同階層になるように配置されている必要があるのだった。</p><p>私の場合だけど、開発中のリポジトリは、ある場所にまとめてある。<br>例：<code>~/repository/hexo-tag-google-photos-album/</code><br>これが、Hexoプラグインを開発する場所。</p><p>一方で、ただ使うだけのものは、別の場所にある。<br>Hexoで構成しているブログの作業場所は、こんな感じ。<br>例：<code>~/www/MyBlog/</code></p><p>つまり、自分のブログに自分のプラグインを組み込むとすると、<br>例：<code>~/www/MyBlog/node_modules/hexo-tag-google-photos-album/</code><br>ということになる。</p><p>しかしながら、npm link的には、上記の2箇所を直接リンクすることはできないわけだ。</p><p>なので、さらに回りくどいが、以下のようにして、解決してみる。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">naoto@MyComputer:~/www/MyBlog$ <span class="built_in">cd</span> ..</span><br><span class="line">naoto@MyComputer:~/www$ ln -s ../repository/hexo-tag-google-photos-album</span><br><span class="line">naoto@MyComputer:~/www$ ls -l hexo-tag-google-photos-album</span><br><span class="line">lrwxrwxrwx 1 naoto naoto 42  5月  6 01:46 hexo-tag-google-photos-album -> ../repository/hexo-tag-google-photos-album</span><br></pre></td></tr></tbody></table></figure><p>こうすることで、開発中のプラグイン実体は従来通りのままとしつつ、link可能な場所にも配置できた。</p><p>呼び出される側のlinkは、以下の通り。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">naoto@MyComputer:~/www$ <span class="built_in">cd</span> hexo-tag-google-photos-album</span><br><span class="line">naoto@MyComputer:~/www/hexo-tag-google-photos-album$ sudo npm link</span><br><span class="line">(snip)</span><br><span class="line">/usr/lib/node_modules/hexo-tag-google-photos-album -> /home/naoto/repository/hexo-tag-google-photos-album</span><br></pre></td></tr></tbody></table></figure><p>そして、呼び出す方で使う側の、つまりブログ側の（しつこい）linkはこの通り。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">naoto@MyComputer:~/www/hexo-tag-google-photos-album$ <span class="built_in">cd</span> ../MyBlog</span><br><span class="line">naoto@MyComputer:~/www/MyBlog$ npm link hexo-tag-google-photos-album</span><br><span class="line">/home/naoto/www/MyBlog/node_modules/hexo-tag-google-photos-album -> /usr/lib/node_modules/hexo-tag-google-photos-album -> /home/naoto/repository/hexo-tag-google-photos-album</span><br><span class="line">naoto@MyComputer:~/www/MyBlog$ grep photos package.json</span><br><span class="line">    <span class="string">"hexo-tag-google-photos-album"</span>: <span class="string">"git+https://github.com/isnot/hexo-tag-google-photos-album.git"</span>,</span><br><span class="line">naoto@MyComputer:~/www/MyBlog$ ls -l node_modules/hexo-tag-google-photos-album</span><br><span class="line">lrwxrwxrwx 1 naoto naoto 64  5月  6 01:50 node_modules/hexo-tag-google-photos-album -> ../../../../../usr/lib/node_modules/hexo-tag-google-photos-album</span><br></pre></td></tr></tbody></table></figure><p>これで、毎度git pushとnpm upを繰り返すこと無く、作業ができるようになる（はず）。<br>確かめてみよう。</p><p>開発中のプラグインの中に、以下を書き加える。</p><figure class="highlight javascript"><figcaption><span>~/repository/hexo-tag-google-photos-album/index.js</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> { inspect } = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> g = <span class="built_in">Function</span>(<span class="string">'return this'</span>)();</span><br><span class="line"><span class="built_in">console</span>.log(inspect(g, { <span class="attr">depth</span>: <span class="number">0</span> }));</span><br><span class="line"><span class="built_in">console</span>.log(inspect(hexo, { <span class="attr">depth</span>: <span class="number">0</span> }));</span><br></pre></td></tr></tbody></table></figure><p>これを、コミットもせず、コピーもせず、動かしたい。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">naoto@MyComputer:~/www/MyBlog$ hexo list page</span><br><span class="line">Object [global] {</span><br><span class="line">  global: [Circular],</span><br><span class="line">  process: [process],</span><br><span class="line">  Buffer: [Function],</span><br><span class="line">  clearImmediate: [Function: clearImmediate],</span><br><span class="line">  clearInterval: [Function: clearInterval],</span><br><span class="line">  clearTimeout: [Function: clearTimeout],</span><br><span class="line">  setImmediate: [Function],</span><br><span class="line">  setInterval: [Function: setInterval],</span><br><span class="line">  setTimeout: [Function] }</span><br><span class="line">Hexo {</span><br><span class="line">  _events: [Object: null prototype] {},</span><br><span class="line">  _eventsCount: 0,</span><br><span class="line">  _maxListeners: undefined,</span><br><span class="line">  base_dir: <span class="string">'/home/naoto/www/MyBlog/'</span>,</span><br><span class="line">  public_dir: <span class="string">'/home/naoto/www/MyBlog/public/'</span>,</span><br><span class="line">  source_dir: <span class="string">'/home/naoto/www/MyBlog/source/'</span>,</span><br><span class="line">  plugin_dir: <span class="string">'/home/naoto/www/MyBlog/node_modules/'</span>,</span><br><span class="line">  script_dir: <span class="string">'/home/naoto/www/MyBlog/scripts/'</span>,</span><br><span class="line">  scaffold_dir: <span class="string">'/home/naoto/www/MyBlog/scaffolds/'</span>,</span><br><span class="line">  theme_dir: <span class="string">'/home/naoto/www/MyBlog/themes/stage/'</span>,</span><br><span class="line">  theme_script_dir: <span class="string">'/home/naoto/www/MyBlog/themes/stage/scripts/'</span>,</span><br><span class="line">  env: [Object],</span><br><span class="line">  extend: [Object],</span><br><span class="line">  config: [Object],</span><br><span class="line">  <span class="built_in">log</span>: [Logger],</span><br><span class="line">  render: [Render],</span><br><span class="line">  route: [Router],</span><br><span class="line">  post: [Post],</span><br><span class="line">  scaffold: [Scaffold],</span><br><span class="line">  _dbLoaded: <span class="literal">false</span>,</span><br><span class="line">  _isGenerating: <span class="literal">false</span>,</span><br><span class="line">  database: [Database],</span><br><span class="line">  config_path: <span class="string">'/home/naoto/www/MyBlog/_config.yml'</span>,</span><br><span class="line">  <span class="built_in">source</span>: [Source],</span><br><span class="line">  theme: [Theme],</span><br><span class="line">  locals: [Locals] }</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  ---- START COPYING TAG CLOUD FILES ----</span><br><span class="line">INFO  ---- END COPYING TAG CLOUD FILES ----</span><br><span class="line">Date        Title                          Path</span><br><span class="line">2019-04-09  Tags                           tags/index.md</span><br><span class="line">2019-04-13  About いしだなおと / isnot N3  about/index.md</span><br></pre></td></tr></tbody></table></figure><p>できた！</p><p>いいね。これで行こう。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;h2 id=&quot;npm-linkを使いこなすには&quot;&gt;&lt;a href=&quot;#npm-linkを使いこなすには&quot; class=&quot;headerlink&quot; title=&quot;npm linkを使いこなすには&quot;&gt;&lt;/a&gt;npm linkを使いこなすには&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.npmjs.com/cli/link.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm link&lt;/a&gt;という、ありがたい仕組みがあって、非公開のモジュール（または開発中のバージョン）を、node_modulesの中に配置することができる。&lt;br&gt;基本的には、シンボリック・リンクである。&lt;/p&gt;
&lt;p&gt;ここまでは、すぐに把握できたけど、実はうまく動作させるための、さらなる条件があった。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://pages.isnot.jp/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="npm" scheme="https://pages.isnot.jp/tags/npm/"/>
    
      <category term="javascript" scheme="https://pages.isnot.jp/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 内部探訪 (1) はじめに</title>
    <link href="https://pages.isnot.jp/2019-05/05-study-about-hexos-internals-1/"/>
    <id>https://pages.isnot.jp/2019-05/05-study-about-hexos-internals-1/</id>
    <published>2019-05-05T14:29:55.000Z</published>
    <updated>2019-05-05T15:37:05.105Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><p>Hexoを選択した理由は、Node.jsだから、Javascriptだから、つまりいろいろと、自身で内部構造を含めて手を加えるため。<br>それは使い始めるとすぐに現実になり、早速プラグインを作成したりもした。（参照 <a href="/2019-04/30-hexo-tag-google-photos-album-is-arrived/" title="hexo-tag-google-photos-album 公開しました">hexo-tag-google-photos-album 公開しました</a>）</p><p>だんだんとHexoの内部構造やAPIについて理解をしはじめたところです。しかしながら開発においてはまだまだ、暗中模索です。</p><p>特に、記事やブログのメタデータや状態などを処理の過程で参照しようと思った時と、jsやcssの挿入（インジェクション）が、掴みにくいポイントだと思う。</p><a id="more"></a><h2 id="インジェクションの方法"><a href="#インジェクションの方法" class="headerlink" title="インジェクションの方法"></a>インジェクションの方法</h2><p>はじめに<a href="https://github.com/hexojs/hexo-inject" target="_blank" rel="noopener">hexo-inject</a>を見つけた時、これでかなり楽ができそうだなと思いました。<br>しかし実際に使おうと思い、試してみるのですが、思い通りに動かすことができませんでした。</p><blockquote><p>This package has been deprecated<br>Author message:</p><p>The author does not use Hexo any more. This plugin is no longer maintained.</p><footer><strong>www.npmjs.com</strong><cite><a href="https://www.npmjs.com/package/hexo-inject" target="_blank" rel="noopener">/package/hexo-inject</a></cite></footer></blockquote><p>とのことで、現段階ではコレに頼るのは諦めました。<br>なお、元作者以外のメンテナの動きがあるようなので、少し期待しつつ成り行きを見守っています。</p><p>で、他のプラグインを（少しだけ）調査したのですが、インジェクションにはまだ定説というかベスト・プラクティスが確立しているようには見えませんでした。<br>いくつかアプローチがあるものの、私の望む動作とは少し違っているようです。<br>それというのも、Hexoのプラグイン機構の動作と、うまくマッチしていないように思いました。</p><p>postもしくはpageの中で、1回だけ呼び出す限りにおいては、いくつかの手法で（私の実装でも）問題なく動いています。</p><p>同じくpostもしくはpageの中で、複数回同じプラグイン（この場合はTagプラグインを想定）が呼び出されたときにどうなるかというと、私の手法ではマズイ部分があります。</p><p>探してみると、ランダムな文字列をうまく使って、重複したインジェクションの問題を回避しているプラグインがあることがわかりました。<br>それはそれで良いのですが、私の目的では、単に同一html文書内ではインジェクションが1回だけ、というような動きにしたく思い、引き続き調査中です。</p><p>もう一つの問題は、アーカイブもしくはインデックスでの挙動。特にインデックス。</p><p>私が使っているテーマ（Stage）だとアーカイブ系（カテゴリー別、タグ別一覧も同様）ではタイトルのみで本文が入らないのでまだ問題になっていないのですが、インデックスではそうもいきません。</p><p>ここでも、複数回の呼び出しが発生することを想定した作り込みが必要になりますが、私の実装では対応できていません。（不完全だが、1画面内で最初のTagプラグイン記述のみ、動いている）</p><p>あと、挿入位置も。<br>コンテンツの中（body要素の途中）ではなく、head要素の最後とか、body要素の最後に挿入したい。</p><h2 id="状態の参照"><a href="#状態の参照" class="headerlink" title="状態の参照"></a>状態の参照</h2><p>ドキュメントの、<a href="https://hexo.io/api/" target="_blank" rel="noopener">API</a>を見ればおおよそは分かります。<br>でも、もっと細かい部分を確かめようと思うと、上記のドキュメントでは物足りなさを感じました。</p><p>私もhexo-tag-google-photos-albumを開発している過程で、その場しのぎ的に調査したのですが、効率的にやれていなかったのと、今後のことを思うと、まとまった形でどこかに書き出しておいたほうがいいなと思いました。</p><p>このあと、Hexoプラグイン開発に役立つよう、hexo-tag-google-photos-albumの開発を題材にとって、それらをまとめていきたいです。</p><h2 id="他にも、開発の役に立ちそうなこと"><a href="#他にも、開発の役に立ちそうなこと" class="headerlink" title="他にも、開発の役に立ちそうなこと"></a>他にも、開発の役に立ちそうなこと</h2><p>まだまだ理解できていないこと。</p><p>Hexoの一連のライフサイクル。<br>それぞれの段階で、どんな処理が走るのか。<br>とか。</p><p>それとテーマ。</p><p>あとは、プラグインのロードあたりも、おいおい調べる必要が出てくるかも。</p><p>それと、<code>npm link</code>を効果的に使う方法をちゃんと理解しておかないと、開発の効率が悪すぎる……。</p><p>そういったことを、連載形式でまとめていけたらと思います。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;p&gt;Hexoを選択した理由は、Node.jsだから、Javascriptだから、つまりいろいろと、自身で内部構造を含めて手を加えるため。&lt;br&gt;それは使い始めるとすぐに現実になり、早速プラグインを作成したりもした。（参照 &lt;a href=&quot;/2019-04/30-hexo-tag-google-photos-album-is-arrived/&quot; title=&quot;hexo-tag-google-photos-album 公開しました&quot;&gt;hexo-tag-google-photos-album 公開しました&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;だんだんとHexoの内部構造やAPIについて理解をしはじめたところです。しかしながら開発においてはまだまだ、暗中模索です。&lt;/p&gt;
&lt;p&gt;特に、記事やブログのメタデータや状態などを処理の過程で参照しようと思った時と、jsやcssの挿入（インジェクション）が、掴みにくいポイントだと思う。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://pages.isnot.jp/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="javascript" scheme="https://pages.isnot.jp/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ツツジ</title>
    <link href="https://pages.isnot.jp/2019-05/01-azalea/"/>
    <id>https://pages.isnot.jp/2019-05/01-azalea/</id>
    <published>2019-05-01T13:16:43.000Z</published>
    <updated>2019-05-01T13:18:46.876Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link crossorigin=&quot;anonymous&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; href=&quot;/css/google_photos_album.css&quot; /&gt;&lt;div class=&quot;article-gallery&quot;&gt;
&lt;/div&gt;&lt;scr
      
    
    </summary>
    
      <category term="photo" scheme="https://pages.isnot.jp/categories/photo/"/>
    
    
      <category term="photo" scheme="https://pages.isnot.jp/tags/photo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-tag-google-photos-album 公開しました</title>
    <link href="https://pages.isnot.jp/2019-04/30-hexo-tag-google-photos-album-is-arrived/"/>
    <id>https://pages.isnot.jp/2019-04/30-hexo-tag-google-photos-album-is-arrived/</id>
    <published>2019-04-29T16:36:16.000Z</published>
    <updated>2019-04-29T22:24:35.424Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><p>静的サイトジェネレータのひとつである、<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>。<br>当ブログで使用している訳ですが、それ用のタグ・プラグインを作成、公開しました。</p><p><a href="https://photos.google.com/" target="_blank" rel="noopener">Googleフォト</a> の、アルバムを埋め込みます。</p><p><a href="https://nodei.co/npm/hexo-tag-google-photos-album/" target="_blank" rel="noopener"><img src="https://nodei.co/npm/hexo-tag-google-photos-album.png" alt="NPM"></a></p><a id="more"></a><ul><li>(GitHub) <a href="https://github.com/isnot/hexo-tag-google-photos-album" target="_blank" rel="noopener">hexo-tag-google-photos-album</a></li><li>(npm) <a href="https://www.npmjs.com/package/hexo-tag-google-photos-album" target="_blank" rel="noopener">hexo-tag-google-photos-album</a></li><li>(sample) <a href="https://pages.isnot.jp/2019-04/13-image-test/">https://pages.isnot.jp/2019-04/13-image-test/</a></li></ul><p>詳しくは、<a href="https://github.com/isnot/hexo-tag-google-photos-album/blob/master/README.ja.md" target="_blank" rel="noopener">簡単な説明</a>を書いたので、そちらをご参照ください。</p><p>npmにモジュールを公開するのは初めてなのですが、思った以上に手続きというか手順が簡単ですね。</p><p>成果物のほうはと言うと、初期のコンセプトに沿ったProof of conceptまではすぐに出来たのですが、細部の詰めを固めるのに、かなり手間取りました。</p><p>あと、Googleフォトにある画像のURLをスクレイピングで抜き出している部分は、アドホックなものだという認識で、あちら次第で変わったりするのかなと思ってます。<br>og:imageに入っているカバー画像のURLだけは、比較的に永続性があると思われます。<br>それ以外は、まぁ、よくわからない😁。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;p&gt;静的サイトジェネレータのひとつである、&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;。&lt;br&gt;当ブログで使用している訳ですが、それ用のタグ・プラグインを作成、公開しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://photos.google.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Googleフォト&lt;/a&gt; の、アルバムを埋め込みます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/hexo-tag-google-photos-album/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/hexo-tag-google-photos-album.png&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://pages.isnot.jp/categories/javascript/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="npm" scheme="https://pages.isnot.jp/tags/npm/"/>
    
      <category term="github" scheme="https://pages.isnot.jp/tags/github/"/>
    
      <category term="javascript" scheme="https://pages.isnot.jp/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>さくら 2019</title>
    <link href="https://pages.isnot.jp/2019-04/15-sakura2019/"/>
    <id>https://pages.isnot.jp/2019-04/15-sakura2019/</id>
    <published>2019-04-15T13:23:53.000Z</published>
    <updated>2019-04-24T06:50:26.979Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><p>今年のさくらが散りました。</p><p>私は何年前からか、このシーズンにさくらの写真を撮って、その時々にアルバムとして公開したりなどしているのですが、今年はこの新しいブログで掲載しようかと思います。</p><p>全ての写真は以下にあります。</p><a id="more"></a><p>個人的な嗜好として、さくらは散る時が最も見どころだと思う。<br>特に地面等に散らばった花びらと、それをゴミとして片付けるさまなど。<br>あれだけ、散々ともてはやされ、愛でられても、散ればゴミですよと。<br>いとをかし。</p><h3 id="フォトアルバムとしての見せ方は…"><a href="#フォトアルバムとしての見せ方は…" class="headerlink" title="フォトアルバムとしての見せ方は…"></a>フォトアルバムとしての見せ方は…</h3><p>撮影した写真は全てGoogleフォトに保存しているのですが、それを別の場所に再アップロード等することなく、ブログに貼り付けるのが少々厄介。<br>うまい具合に、出来ないものか。</p><h4 id="追記"><a href="#追記" class="headerlink" title="追記"></a>追記</h4><p>Googleフォトのアルバムをうまく貼るためにプラグイン書いた。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;p&gt;今年のさくらが散りました。&lt;/p&gt;
&lt;p&gt;私は何年前からか、このシーズンにさくらの写真を撮って、その時々にアルバムとして公開したりなどしているのですが、今年はこの新しいブログで掲載しようかと思います。&lt;/p&gt;
&lt;p&gt;全ての写真は以下にあります。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="photo" scheme="https://pages.isnot.jp/categories/photo/"/>
    
    
      <category term="photo" scheme="https://pages.isnot.jp/tags/photo/"/>
    
      <category term="sakura" scheme="https://pages.isnot.jp/tags/sakura/"/>
    
  </entry>
  
  <entry>
    <title>画像のテスト</title>
    <link href="https://pages.isnot.jp/2019-04/13-image-test/"/>
    <id>https://pages.isnot.jp/2019-04/13-image-test/</id>
    <published>2019-04-13T07:06:56.000Z</published>
    <updated>2019-05-01T13:57:14.659Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><a id="more"></a><p><a href="https://lh3.googleusercontent.com/YHvAci91RfH8pwt2nHqnfdn6lp7eZj6Nnweo3flsIlarZoL_ikkgyRh6dNuzfTFpkaCDC8hYTuNcxJveem2Cz55ij7ysZ_Rkorlc2qg653JIy4BdBsMK8MSQsz23K5D5ParJvTuWyoixJlG52XJhbaZr3Co3xuksdbb_cSvGEBtQp3w5v-QXOYGoWL3YVJ6cwVIIDx-6ahPaUGvLaPtgO7T4jChyaPVbTbAXsrcQZDaWHKjFANRhO_pMw-rV7s8bBCzNiUBNWApyYb9gbfMnxw9xC5KZvNkZ2flyL3zqt3T5Ur4i8wuEADXJAv6QghxygH2rxEdX92hEXnAg2JsBqopjNwSi-LYhbcdtKK4bFXjIbPSGmsA2WM5D-fKkp17HklPoITZOIdkU9-CbgIgLHY7Kv2afzxlSkal4epbeEIkpPEeBJtSOF2QkCZ9Gl33zwrUrtpt0Tbn-jmbZ1rK7jBUOFVT3Tx-LrVWjDRyfLnxRXWkvLjbYWDXA7IHODGXdGVX3l5k6Aps2aOerxtotMU7KYOt4M1A1mFfBsX15ragK-RdYrn8k9ITIT7pQpPVj5QgGW9g3aH8qrnR2zt3rhUln-hsZs0iBXL03t1apStUMzpFdJ5_Z1M6eMz8Dj1RwTIYmeyLBF4EoEp5ENn34Uvh-FWXWALC7Y1ecuTTKjhy9xo7A40eQuxmXusPOdlJ9P8HHl2vz_cSWaybxqUFWIwJynA=s0-no" class="gallery-item" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/YHvAci91RfH8pwt2nHqnfdn6lp7eZj6Nnweo3flsIlarZoL_ikkgyRh6dNuzfTFpkaCDC8hYTuNcxJveem2Cz55ij7ysZ_Rkorlc2qg653JIy4BdBsMK8MSQsz23K5D5ParJvTuWyoixJlG52XJhbaZr3Co3xuksdbb_cSvGEBtQp3w5v-QXOYGoWL3YVJ6cwVIIDx-6ahPaUGvLaPtgO7T4jChyaPVbTbAXsrcQZDaWHKjFANRhO_pMw-rV7s8bBCzNiUBNWApyYb9gbfMnxw9xC5KZvNkZ2flyL3zqt3T5Ur4i8wuEADXJAv6QghxygH2rxEdX92hEXnAg2JsBqopjNwSi-LYhbcdtKK4bFXjIbPSGmsA2WM5D-fKkp17HklPoITZOIdkU9-CbgIgLHY7Kv2afzxlSkal4epbeEIkpPEeBJtSOF2QkCZ9Gl33zwrUrtpt0Tbn-jmbZ1rK7jBUOFVT3Tx-LrVWjDRyfLnxRXWkvLjbYWDXA7IHODGXdGVX3l5k6Aps2aOerxtotMU7KYOt4M1A1mFfBsX15ragK-RdYrn8k9ITIT7pQpPVj5QgGW9g3aH8qrnR2zt3rhUln-hsZs0iBXL03t1apStUMzpFdJ5_Z1M6eMz8Dj1RwTIYmeyLBF4EoEp5ENn34Uvh-FWXWALC7Y1ecuTTKjhy9xo7A40eQuxmXusPOdlJ9P8HHl2vz_cSWaybxqUFWIwJynA=s0-no"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="photo" scheme="https://pages.isnot.jp/categories/photo/"/>
    
    
      <category term="photo" scheme="https://pages.isnot.jp/tags/photo/"/>
    
  </entry>
  
  <entry>
    <title>はじめまして！</title>
    <link href="https://pages.isnot.jp/2019-04/09-index/"/>
    <id>https://pages.isnot.jp/2019-04/09-index/</id>
    <published>2019-04-09T06:00:00.000Z</published>
    <updated>2019-04-24T01:33:05.214Z</updated>
    
    <content type="html"><![CDATA[<link crossorigin="anonymous" media="screen" rel="stylesheet" href="/css/google_photos_album.css" /><div class="article-gallery"><h2 id="My-First-Weblog"><a href="#My-First-Weblog" class="headerlink" title="My First Weblog"></a>My First Weblog</h2><p>Google+が個人向けサービス終了となり、今後のアウトプットについて考えた。</p><p>考えた結果、静的サイト・ジェネレータを使って、ブログ形式のサイトを始めることにしました。それがコレです。</p><a id="more"></a><p>静的サイト・ジェネレータを選んだのは、書く内容を勘案したうえで、「自力でなんとかする」ことに意味があるように思えたから。<br>特定サービスへのロックオンを、できれば減らしたいという意味で。とはいえ、全くナッシングで全て自力というのも、また無駄でありつつ。<br>そのバランスが、ちょうど良いように思えたから。</p><p>数あるプロダクトの中でHexoを選択したのは、あまり悩まなかったな。Javascript製で、npmを使ってセットアップが簡単ということで。</p><p>それで、ドメインはずっと使っているisnot.jpに、新しくサブドメインを追加することにした。<br>本体ごと、まるっと乗り換えるほどには思いきれなかったということである。</p><p>そのうえで、ホスティングにGitHub Pagesを使う。<br>レンサバに直接デプロイするのに比べると、例えば出先でスマホから、ブラウザを使ってちょこっとコンテンツを書き換える程度のことが、それなりに出来るから。<br>まぁ普段はデスクトップのパソコンで作業します。</p><h3 id="つまずき-その1-ドメインの設定"><a href="#つまずき-その1-ドメインの設定" class="headerlink" title="つまずき その1 ドメインの設定"></a>つまずき その1 ドメインの設定</h3><p>さくらの会員メニューからログイン。ドメインの設定。<br>ドメインの編集から、CNAMEを追加する。このとき、「値」に何を設定すれば良いか分かってなかったので、調べる。と、FQDN書けよと。<br>ここで失敗。末尾のドット（.）を付け忘れる。いつまで待ってもドメインが伝播してこないなーとか。<br>1日待って、おかしいと思って見直したら、そういうことだった。</p><p>ついでに、無料のSSL証明書をポチっとした。この上なく楽だな〜。<br>業務で国内大手事業者からSSL証明書を買った経験は何度かあるけど、そういうのと次元がまったく違ってますね。</p><h3 id="つまずき-その2-リポジトリの設定"><a href="#つまずき-その2-リポジトリの設定" class="headerlink" title="つまずき その2 リポジトリの設定"></a>つまずき その2 リポジトリの設定</h3><p>「CNAME」という名前のファイルを置くのだが、いろいろあって、衝突したり消えたりした。<br>結局でいうと、<$blog_home>/source/CNAME に置いてあげれば解決でした。</p><h3 id="themes-のカスタマイズ"><a href="#themes-のカスタマイズ" class="headerlink" title="themes のカスタマイズ"></a>themes のカスタマイズ</h3><p>themesには、Stageというのを選んだ。<br>結構たくさんある中で選んだポイントは、<br>本文テキストの文字サイズが小さくないこと。<br>ライト系で、白っぽいこと。<br>そして、jQuery依存しないで済むこと。</p><p>よく見たらjQuery使われていたんだけど、見た目のちょっとした動きを付けるためだけに使っている程度だったので、カスタマイズの過程で外しといた。</p><p>あとはヘッダーの画像を入れ替え、位置関係を調整。<br>サイドバーのアバター画像も入れ替え。</p><p>それと、独自のCSSを追加した。<br>Parmalinkの書式を変えた。</p><p>マルチ言語機能があるが、日本語（ja）の言語ファイルがなかったので、enをコピーして適当に翻訳した。</p><p>今のところは、この程度かな。</p><h3 id="つまずき-その3-jsの変更を反映する"><a href="#つまずき-その3-jsの変更を反映する" class="headerlink" title="つまずき その3 jsの変更を反映する"></a>つまずき その3 jsの変更を反映する</h3><p>これはつまずきというより、すぐに気付けた。<br>hexo コマンドでは、themesの中の、webpack処理が行われないようです。<br>つまり、元jsファイルを更新した時に、minify後のファイルには反映されないのです。<br>なので、以下のようにbuildしてやる必要がありました。</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes/stage/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ../..</span></span><br></pre></td></tr></tbody></table></figure><h3 id="既存コンテンツどうしよう"><a href="#既存コンテンツどうしよう" class="headerlink" title="既存コンテンツどうしよう"></a>既存コンテンツどうしよう</h3><p>G+のバックアップデータをインポートするとしたら、パーザから自作してだな。<br>うーむ。</p><p>そして旧ブログというかWeb日記も、そのうちコンバートしておくか。</p><p>以上です。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-autoplay.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script src="/js/lg-pager.min.js"></script><script src="/js/lg-hash.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('article-gallery')[0], options);        }</script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script><script>function addLoadEvent(func) {  const oldonload = window.onload;  if (typeof window.onload !== 'function') {    window.onload = func;  } else {    window.onload = () => {      oldonload();      func();    };  }}  addLoadEvent(() => {    try {      if (window.innerWidth < Number('768')) {        return;      }      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));      for (let anchor of imgs) {        anchor.href = anchor.href.replace(/=s720\-no/i, '=s1920-no');      }    } catch (e) {      console.log(e);    }  });</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;article-gallery&quot;&gt;&lt;h2 id=&quot;My-First-Weblog&quot;&gt;&lt;a href=&quot;#My-First-Weblog&quot; class=&quot;headerlink&quot; title=&quot;My First Weblog&quot;&gt;&lt;/a&gt;My First Weblog&lt;/h2&gt;&lt;p&gt;Google+が個人向けサービス終了となり、今後のアウトプットについて考えた。&lt;/p&gt;
&lt;p&gt;考えた結果、静的サイト・ジェネレータを使って、ブログ形式のサイトを始めることにしました。それがコレです。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="myself" scheme="https://pages.isnot.jp/categories/myself/"/>
    
    
      <category term="hexo" scheme="https://pages.isnot.jp/tags/hexo/"/>
    
      <category term="isnot" scheme="https://pages.isnot.jp/tags/isnot/"/>
    
      <category term="github pages" scheme="https://pages.isnot.jp/tags/github-pages/"/>
    
      <category term="domain" scheme="https://pages.isnot.jp/tags/domain/"/>
    
  </entry>
  
</feed>
