[{"raw":"---\ntitle: Hexo 内部探訪 (6) DevToolsを使ったデバッグ\ncategories: hexo\ndate: 2019-05-06 23:08:08\ntags: [hexo, javascript]\n---\n\n恥ずかしながらデバッカーを使い慣れておらず、こういった実行時コンテキストの解析に、手間取っていました。\n今回は、DevToolsプロトコルを使って解析してみよう。\n\n<!-- more -->\n\n```bash\n$ cd &lt;path-to-your-blog-dir&gt;\n$ hexo clean\n$ node --inspect-brk node_modules/hexo-cli/bin/hexo g --debug\n```\n\nこのようにinspectを有効化してから、ブラウザ（Chromiumを利用）で`chrome://inspect`を開き、`Remote Target`の中に現れる`inspect this`から、デバッカーを開始する。\n\nこれだと、デバッカーに馴れていない私にとっては、見たいところにたどり着くまでに手間取ってしまった。\n\nそこで、自身で開発中のプラグインの中に、任意のブレークポイントをあらかじめ挿入してしまう。\n\n```javascript\n  debugger;\n````\n\nそして\n\n```bash\n$ node --inspect node_modules/hexo-cli/bin/hexo g --debug\n```\n\n**-brk** の有無が異なる点に注意。\n\nこれで、ようやく調査がやりやすくなりました。\nデバッカーの使い方は、これが詳しい。\n\n[コードをステップ実行する方法 | Tools for Web Developers | Google Developers](https://developers.google.com/web/tools/chrome-devtools/javascript/step-code?hl=ja)\n","content":"<link crossorigin=\"anonymous\" media=\"screen\" rel=\"stylesheet\" href=\"/css/google_photos_album.css\" /><div class=\"article-gallery\"><p>恥ずかしながらデバッカーを使い慣れておらず、こういった実行時コンテキストの解析に、手間取っていました。<br>今回は、DevToolsプロトコルを使って解析してみよう。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;path-to-your-blog-dir&gt;</span><br><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ node --inspect-brk node_modules/hexo-cli/bin/hexo g --debug</span><br></pre></td></tr></tbody></table></figure>\n<p>このようにinspectを有効化してから、ブラウザ（Chromiumを利用）で<code>chrome://inspect</code>を開き、<code>Remote Target</code>の中に現れる<code>inspect this</code>から、デバッカーを開始する。</p>\n<p>これだと、デバッカーに馴れていない私にとっては、見たいところにたどり着くまでに手間取ってしまった。</p>\n<p>そこで、自身で開発中のプラグインの中に、任意のブレークポイントをあらかじめ挿入してしまう。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></tbody></table></figure>\n<p>そして</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ node --inspect node_modules/hexo-cli/bin/hexo g --debug</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>-brk</strong> の有無が異なる点に注意。</p>\n<p>これで、ようやく調査がやりやすくなりました。<br>デバッカーの使い方は、これが詳しい。</p>\n<p><a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/step-code?hl=ja\" target=\"_blank\" rel=\"noopener\">コードをステップ実行する方法 | Tools for Web Developers | Google Developers</a></p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script src=\"/js/lg-thumbnail.min.js\"></script><script src=\"/js/lg-zoom.min.js\"></script><script src=\"/js/lg-autoplay.min.js\"></script><script src=\"/js/lg-fullscreen.min.js\"></script><script src=\"/js/lg-pager.min.js\"></script><script src=\"/js/lg-hash.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('article-gallery')[0], options);\n        }</script><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script><script>\nfunction addLoadEvent(func) {\n  const oldonload = window.onload;\n  if (typeof window.onload !== 'function') {\n    window.onload = func;\n  } else {\n    window.onload = () => {\n      oldonload();\n      func();\n    };\n  }\n}\n  addLoadEvent(() => {\n    try {\n      if (window.innerWidth < Number('768')) {\n        return;\n      }\n      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));\n      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));\n      for (let anchor of imgs) {\n        anchor.href = anchor.href.replace(/=s720\\-no/i, '=s1920-no');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n</script>\n","title":"Hexo 内部探訪 (6) DevToolsを使ったデバッグ","slug":"study-about-hexos-internals-6","date":"2019-05-06T14:08:08.000Z","updated":"2019-05-06T14:11:11.564Z","comments":true,"path":"2019-05/06-study-about-hexos-internals-6/","link":"","permalink":"https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-6/","excerpt":"<div class=\"article-gallery\"><p>恥ずかしながらデバッカーを使い慣れておらず、こういった実行時コンテキストの解析に、手間取っていました。<br>今回は、DevToolsプロトコルを使って解析してみよう。</p></div>","categories":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/tags/hexo/"},{"name":"javascript","slug":"javascript","permalink":"https://pages.isnot.jp/tags/javascript/"}]},{"raw":"---\ntitle: Hexo 内部探訪 (5) ライフサイクル\ncategories: hexo\ndate: 2019-05-06 16:15:43\ntags: [hexo, javascript]\n---\n\nHexoでは、なにはともあれ、コマンドライン（インタラクティブなコマンド・シェル、例えばBash）環境において、`hexo`コマンドを利用することで処理が始まる。\n\n## hexo-cliにある、コマンドラインの処理が始まる場所\n\n- [hexo-cli/lib/hexo.js](https://github.com/hexojs/hexo-cli/blob/master/lib/hexo.js)\n- hexo-cli/lib/context.js\n- hexo-cli/lib/extend/console.js\n\n## Hexo オブジェクト\n\n- [hexo/lib/hexo/index.js](https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js)\n","content":"<link crossorigin=\"anonymous\" media=\"screen\" rel=\"stylesheet\" href=\"/css/google_photos_album.css\" /><div class=\"article-gallery\"><p>Hexoでは、なにはともあれ、コマンドライン（インタラクティブなコマンド・シェル、例えばBash）環境において、<code>hexo</code>コマンドを利用することで処理が始まる。</p>\n<h2 id=\"hexo-cliにある、コマンドラインの処理が始まる場所\"><a href=\"#hexo-cliにある、コマンドラインの処理が始まる場所\" class=\"headerlink\" title=\"hexo-cliにある、コマンドラインの処理が始まる場所\"></a>hexo-cliにある、コマンドラインの処理が始まる場所</h2><ul>\n<li><a href=\"https://github.com/hexojs/hexo-cli/blob/master/lib/hexo.js\" target=\"_blank\" rel=\"noopener\">hexo-cli/lib/hexo.js</a></li>\n<li>hexo-cli/lib/context.js</li>\n<li>hexo-cli/lib/extend/console.js</li>\n</ul>\n<h2 id=\"Hexo-オブジェクト\"><a href=\"#Hexo-オブジェクト\" class=\"headerlink\" title=\"Hexo オブジェクト\"></a>Hexo オブジェクト</h2><ul>\n<li><a href=\"https://github.com/hexojs/hexo/blob/master/lib/hexo/index.js\" target=\"_blank\" rel=\"noopener\">hexo/lib/hexo/index.js</a></li>\n</ul>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script src=\"/js/lg-thumbnail.min.js\"></script><script src=\"/js/lg-zoom.min.js\"></script><script src=\"/js/lg-autoplay.min.js\"></script><script src=\"/js/lg-fullscreen.min.js\"></script><script src=\"/js/lg-pager.min.js\"></script><script src=\"/js/lg-hash.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('article-gallery')[0], options);\n        }</script><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script><script>\nfunction addLoadEvent(func) {\n  const oldonload = window.onload;\n  if (typeof window.onload !== 'function') {\n    window.onload = func;\n  } else {\n    window.onload = () => {\n      oldonload();\n      func();\n    };\n  }\n}\n  addLoadEvent(() => {\n    try {\n      if (window.innerWidth < Number('768')) {\n        return;\n      }\n      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));\n      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));\n      for (let anchor of imgs) {\n        anchor.href = anchor.href.replace(/=s720\\-no/i, '=s1920-no');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n</script>\n","title":"Hexo 内部探訪 (5) ライフサイクル","slug":"study-about-hexos-internals-5","date":"2019-05-06T07:15:43.000Z","updated":"2019-05-06T13:48:32.083Z","comments":true,"path":"2019-05/06-study-about-hexos-internals-5/","link":"","permalink":"https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-5/","excerpt":"","categories":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/tags/hexo/"},{"name":"javascript","slug":"javascript","permalink":"https://pages.isnot.jp/tags/javascript/"}]},{"raw":"---\ntitle: Hexo 内部探訪 (4) プラグインのロード\ncategories: hexo\ndate: 2019-05-06 03:36:30\ntags: [hexo, javascript]\n---\n\n[hexo/lib/hexo/load_plugins.js](https://github.com/hexojs/hexo/blob/master/lib/hexo/load_plugins.js)に書いてある。\n","content":"<link crossorigin=\"anonymous\" media=\"screen\" rel=\"stylesheet\" href=\"/css/google_photos_album.css\" /><div class=\"article-gallery\"><p><a href=\"https://github.com/hexojs/hexo/blob/master/lib/hexo/load_plugins.js\" target=\"_blank\" rel=\"noopener\">hexo/lib/hexo/load_plugins.js</a>に書いてある。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script src=\"/js/lg-thumbnail.min.js\"></script><script src=\"/js/lg-zoom.min.js\"></script><script src=\"/js/lg-autoplay.min.js\"></script><script src=\"/js/lg-fullscreen.min.js\"></script><script src=\"/js/lg-pager.min.js\"></script><script src=\"/js/lg-hash.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('article-gallery')[0], options);\n        }</script><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script><script>\nfunction addLoadEvent(func) {\n  const oldonload = window.onload;\n  if (typeof window.onload !== 'function') {\n    window.onload = func;\n  } else {\n    window.onload = () => {\n      oldonload();\n      func();\n    };\n  }\n}\n  addLoadEvent(() => {\n    try {\n      if (window.innerWidth < Number('768')) {\n        return;\n      }\n      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));\n      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));\n      for (let anchor of imgs) {\n        anchor.href = anchor.href.replace(/=s720\\-no/i, '=s1920-no');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n</script>\n","title":"Hexo 内部探訪 (4) プラグインのロード","slug":"study-about-hexos-internals-4","date":"2019-05-05T18:36:30.000Z","updated":"2019-05-06T13:49:00.078Z","comments":true,"path":"2019-05/06-study-about-hexos-internals-4/","link":"","permalink":"https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-4/","excerpt":"","categories":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/tags/hexo/"},{"name":"javascript","slug":"javascript","permalink":"https://pages.isnot.jp/tags/javascript/"}]},{"raw":"---\ntitle: Hexo 内部探訪 (3) コンテキストとしての&quot;hexo&quot;変数\ncategories: hexo\ndate: 2019-05-06 00:03:00\ntags: [hexo, javascript]\n---\n\n## 調査の開始にあたって\n\nプラグイン（さしあたりTagプラグインを想定）の実装中にて参照できる変数やオブジェクトを、調べてまとめよう。\n\n[ドキュメント | Node.js](https://nodejs.org/ja/docs/)、 [Process](https://nodejs.org/api/process.html) 等もためになる。\n\n<!-- more -->\n\nところで、Node.jsでは、グローバルな空間を参照するためのキーワードがある。\n`global`である。\n\nまた、次のようなやり方で参照する方法もあるようだ。\n\n```javascript\nconst { inspect } = require('util');\nvar g = Function('return this')();\nconsole.log(inspect(g, { depth: 0 }));\n```\n\nこれらを駆使しつつ、Hexoの場合には、私が見たところほとんど全ての場所で、`hexo`という、トップレベルの変数が見えるので、これを足がかりにしたい。\nまた、他にも使える要素がもしあるなら、確かめたい。\n\n## グローバル汚染はなかった\n\n調査を進めてから理解できたことだが、Hexoではグローバル変数、またはグローバル・オブジェクトを使ってはいない。\n\n何らかのプラグインで、グローバルを意図して使うのならばともかくとして、少なくともHexoの本体と言える範囲や、純正／バンドルされた各プラグインでは、グローバル変数は使わないようだ。いわゆる「グローバル汚染」はない。\n\nプラグイン含めて各所で見かける`hexo`という変数が存在し、トップレベルの階層にあるし、自ら呼び出しているわけでもないので、私は当初これがグローバル変数なのかな？と勘違いしていました。\n\nしかしこれは、実際には、`module.exports`の仕組みによって与えられたもので、各モジュール（概ね各jsファイルに相当）毎にそれぞれエクスポートされていました。\n\n私はこれまで`module.exports`について理解していないままでしたが、今回勉強になりました。\n\n\n（調査中）\n\nHexoオブジェクト\n```json\n{\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  base_dir: '/home/naoto/www/MyBlog/',\n  public_dir: '/home/naoto/www/MyBlog/public/',\n  source_dir: '/home/naoto/www/MyBlog/source/',\n  plugin_dir: '/home/naoto/www/MyBlog/node_modules/',\n  script_dir: '/home/naoto/www/MyBlog/scripts/',\n  scaffold_dir: '/home/naoto/www/MyBlog/scaffolds/',\n  theme_dir: '/home/naoto/www/MyBlog/themes/stage/',\n  theme_script_dir: '/home/naoto/www/MyBlog/themes/stage/scripts/',\n  env: [Object],\n  extend: [Object],\n  config: [Object],\n  log: [Logger],\n  render: [Render],\n  route: [Router],\n  post: [Post],\n  scaffold: [Scaffold],\n  _dbLoaded: true,\n  _isGenerating: true,\n  database: [Database],\n  config_path: '/home/naoto/www/MyBlog/_config.yml',\n  source: [Source],\n  theme: [Theme],\n  locals: [Locals]\n}\n```\n\n## （進捗途中）\n","content":"<link crossorigin=\"anonymous\" media=\"screen\" rel=\"stylesheet\" href=\"/css/google_photos_album.css\" /><div class=\"article-gallery\"><h2 id=\"調査の開始にあたって\"><a href=\"#調査の開始にあたって\" class=\"headerlink\" title=\"調査の開始にあたって\"></a>調査の開始にあたって</h2><p>プラグイン（さしあたりTagプラグインを想定）の実装中にて参照できる変数やオブジェクトを、調べてまとめよう。</p>\n<p><a href=\"https://nodejs.org/ja/docs/\" target=\"_blank\" rel=\"noopener\">ドキュメント | Node.js</a>、 <a href=\"https://nodejs.org/api/process.html\" target=\"_blank\" rel=\"noopener\">Process</a> 等もためになる。</p>\n<a id=\"more\"></a>\n<p>ところで、Node.jsでは、グローバルな空間を参照するためのキーワードがある。<br><code>global</code>である。</p>\n<p>また、次のようなやり方で参照する方法もあるようだ。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> { inspect } = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"built_in\">Function</span>(<span class=\"string\">'return this'</span>)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inspect(g, { <span class=\"attr\">depth</span>: <span class=\"number\">0</span> }));</span><br></pre></td></tr></tbody></table></figure>\n<p>これらを駆使しつつ、Hexoの場合には、私が見たところほとんど全ての場所で、<code>hexo</code>という、トップレベルの変数が見えるので、これを足がかりにしたい。<br>また、他にも使える要素がもしあるなら、確かめたい。</p>\n<h2 id=\"グローバル汚染はなかった\"><a href=\"#グローバル汚染はなかった\" class=\"headerlink\" title=\"グローバル汚染はなかった\"></a>グローバル汚染はなかった</h2><p>調査を進めてから理解できたことだが、Hexoではグローバル変数、またはグローバル・オブジェクトを使ってはいない。</p>\n<p>何らかのプラグインで、グローバルを意図して使うのならばともかくとして、少なくともHexoの本体と言える範囲や、純正／バンドルされた各プラグインでは、グローバル変数は使わないようだ。いわゆる「グローバル汚染」はない。</p>\n<p>プラグイン含めて各所で見かける<code>hexo</code>という変数が存在し、トップレベルの階層にあるし、自ら呼び出しているわけでもないので、私は当初これがグローバル変数なのかな？と勘違いしていました。</p>\n<p>しかしこれは、実際には、<code>module.exports</code>の仕組みによって与えられたもので、各モジュール（概ね各jsファイルに相当）毎にそれぞれエクスポートされていました。</p>\n<p>私はこれまで<code>module.exports</code>について理解していないままでしたが、今回勉強になりました。</p>\n<p>（調査中）</p>\n<p>Hexoオブジェクト<br></p><figure class=\"highlight\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  _events: [Object: null prototype] {},</span><br><span class=\"line\">  _eventsCount: 0,</span><br><span class=\"line\">  _maxListeners: undefined,</span><br><span class=\"line\">  base_dir: '/home/naoto/www/MyBlog/',</span><br><span class=\"line\">  public_dir: '/home/naoto/www/MyBlog/public/',</span><br><span class=\"line\">  source_dir: '/home/naoto/www/MyBlog/source/',</span><br><span class=\"line\">  plugin_dir: '/home/naoto/www/MyBlog/node_modules/',</span><br><span class=\"line\">  script_dir: '/home/naoto/www/MyBlog/scripts/',</span><br><span class=\"line\">  scaffold_dir: '/home/naoto/www/MyBlog/scaffolds/',</span><br><span class=\"line\">  theme_dir: '/home/naoto/www/MyBlog/themes/stage/',</span><br><span class=\"line\">  theme_script_dir: '/home/naoto/www/MyBlog/themes/stage/scripts/',</span><br><span class=\"line\">  env: [Object],</span><br><span class=\"line\">  extend: [Object],</span><br><span class=\"line\">  config: [Object],</span><br><span class=\"line\">  log: [Logger],</span><br><span class=\"line\">  render: [Render],</span><br><span class=\"line\">  route: [Router],</span><br><span class=\"line\">  post: [Post],</span><br><span class=\"line\">  scaffold: [Scaffold],</span><br><span class=\"line\">  _dbLoaded: true,</span><br><span class=\"line\">  _isGenerating: true,</span><br><span class=\"line\">  database: [Database],</span><br><span class=\"line\">  config_path: '/home/naoto/www/MyBlog/_config.yml',</span><br><span class=\"line\">  source: [Source],</span><br><span class=\"line\">  theme: [Theme],</span><br><span class=\"line\">  locals: [Locals]</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"（進捗途中）\"><a href=\"#（進捗途中）\" class=\"headerlink\" title=\"（進捗途中）\"></a>（進捗途中）</h2></div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script src=\"/js/lg-thumbnail.min.js\"></script><script src=\"/js/lg-zoom.min.js\"></script><script src=\"/js/lg-autoplay.min.js\"></script><script src=\"/js/lg-fullscreen.min.js\"></script><script src=\"/js/lg-pager.min.js\"></script><script src=\"/js/lg-hash.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('article-gallery')[0], options);\n        }</script><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script><script>\nfunction addLoadEvent(func) {\n  const oldonload = window.onload;\n  if (typeof window.onload !== 'function') {\n    window.onload = func;\n  } else {\n    window.onload = () => {\n      oldonload();\n      func();\n    };\n  }\n}\n  addLoadEvent(() => {\n    try {\n      if (window.innerWidth < Number('768')) {\n        return;\n      }\n      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));\n      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));\n      for (let anchor of imgs) {\n        anchor.href = anchor.href.replace(/=s720\\-no/i, '=s1920-no');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n</script>\n","title":"Hexo 内部探訪 (3) コンテキストとしての&quot;hexo&quot;変数","slug":"study-about-hexos-internals-3","date":"2019-05-05T15:03:00.000Z","updated":"2019-05-06T16:32:26.881Z","comments":true,"path":"2019-05/06-study-about-hexos-internals-3/","link":"","permalink":"https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-3/","excerpt":"<div class=\"article-gallery\"><h2 id=\"調査の開始にあたって\"><a href=\"#調査の開始にあたって\" class=\"headerlink\" title=\"調査の開始にあたって\"></a>調査の開始にあたって</h2><p>プラグイン（さしあたりTagプラグインを想定）の実装中にて参照できる変数やオブジェクトを、調べてまとめよう。</p>\n<p><a href=\"https://nodejs.org/ja/docs/\" target=\"_blank\" rel=\"noopener\">ドキュメント | Node.js</a>、 <a href=\"https://nodejs.org/api/process.html\" target=\"_blank\" rel=\"noopener\">Process</a> 等もためになる。</p></div>","categories":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/tags/hexo/"},{"name":"javascript","slug":"javascript","permalink":"https://pages.isnot.jp/tags/javascript/"}]},{"raw":"---\ntitle: Hexo 内部探訪 (2) 準備 npm linkメモ\ncategories: hexo\ndate: 2019-05-06 00:02:00\ntags: [hexo, javascript, npm]\n---\n\n## npm linkを使いこなすには\n\n[npm link](https://docs.npmjs.com/cli/link.html)という、ありがたい仕組みがあって、非公開のモジュール（または開発中のバージョン）を、node_modulesの中に配置することができる。\n基本的には、シンボリック・リンクである。\n\nここまでは、すぐに把握できたけど、実はうまく動作させるための、さらなる条件があった。\n\n<!-- more -->\n\nモジュールを読み込む側と、読み込まれる側のモジュールが、ファイルシステム上で同階層になるように配置されている必要があるのだった。\n\n私の場合だけど、開発中のリポジトリは、ある場所にまとめてある。\n例：`~/repository/hexo-tag-google-photos-album/`\nこれが、Hexoプラグインを開発する場所。\n\n一方で、ただ使うだけのものは、別の場所にある。\nHexoで構成しているブログの作業場所は、こんな感じ。\n例：`~/www/MyBlog/`\n\nつまり、自分のブログに自分のプラグインを組み込むとすると、\n例：`~/www/MyBlog/node_modules/hexo-tag-google-photos-album/`\nということになる。\n\nしかしながら、npm link的には、上記の2箇所を直接リンクすることはできないわけだ。\n\nなので、さらに回りくどいが、以下のようにして、解決してみる。\n\n```bash\nnaoto@MyComputer:~/www/MyBlog$ cd ..\nnaoto@MyComputer:~/www$ ln -s ../repository/hexo-tag-google-photos-album\nnaoto@MyComputer:~/www$ ls -l hexo-tag-google-photos-album\nlrwxrwxrwx 1 naoto naoto 42  5月  6 01:46 hexo-tag-google-photos-album -> ../repository/hexo-tag-google-photos-album\n```\n\nこうすることで、開発中のプラグイン実体は従来通りのままとしつつ、link可能な場所にも配置できた。\n\n\n呼び出される側のlinkは、以下の通り。\n\n```bash\nnaoto@MyComputer:~/www$ cd hexo-tag-google-photos-album\nnaoto@MyComputer:~/www/hexo-tag-google-photos-album$ sudo npm link\n(snip)\n/usr/lib/node_modules/hexo-tag-google-photos-album -> /home/naoto/repository/hexo-tag-google-photos-album\n```\n\nそして、呼び出す方で使う側の、つまりブログ側の（しつこい）linkはこの通り。\n\n```bash\nnaoto@MyComputer:~/www/hexo-tag-google-photos-album$ cd ../MyBlog\nnaoto@MyComputer:~/www/MyBlog$ npm link hexo-tag-google-photos-album\n/home/naoto/www/MyBlog/node_modules/hexo-tag-google-photos-album -> /usr/lib/node_modules/hexo-tag-google-photos-album -> /home/naoto/repository/hexo-tag-google-photos-album\nnaoto@MyComputer:~/www/MyBlog$ grep photos package.json\n    \"hexo-tag-google-photos-album\": \"git+https://github.com/isnot/hexo-tag-google-photos-album.git\",\nnaoto@MyComputer:~/www/MyBlog$ ls -l node_modules/hexo-tag-google-photos-album\nlrwxrwxrwx 1 naoto naoto 64  5月  6 01:50 node_modules/hexo-tag-google-photos-album -> ../../../../../usr/lib/node_modules/hexo-tag-google-photos-album\n```\n\nこれで、毎度git pushとnpm upを繰り返すこと無く、作業ができるようになる（はず）。\n確かめてみよう。\n\n開発中のプラグインの中に、以下を書き加える。\n\n```javascript　~/repository/hexo-tag-google-photos-album/index.js\nconst { inspect } = require('util');\nvar g = Function('return this')();\nconsole.log(inspect(g, { depth: 0 }));\nconsole.log(inspect(hexo, { depth: 0 }));\n```\n\nこれを、コミットもせず、コピーもせず、動かしたい。\n\n```bash\nnaoto@MyComputer:~/www/MyBlog$ hexo list page\nObject [global] {\n  global: [Circular],\n  process: [process],\n  Buffer: [Function],\n  clearImmediate: [Function: clearImmediate],\n  clearInterval: [Function: clearInterval],\n  clearTimeout: [Function: clearTimeout],\n  setImmediate: [Function],\n  setInterval: [Function: setInterval],\n  setTimeout: [Function] }\nHexo {\n  _events: [Object: null prototype] {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  base_dir: '/home/naoto/www/MyBlog/',\n  public_dir: '/home/naoto/www/MyBlog/public/',\n  source_dir: '/home/naoto/www/MyBlog/source/',\n  plugin_dir: '/home/naoto/www/MyBlog/node_modules/',\n  script_dir: '/home/naoto/www/MyBlog/scripts/',\n  scaffold_dir: '/home/naoto/www/MyBlog/scaffolds/',\n  theme_dir: '/home/naoto/www/MyBlog/themes/stage/',\n  theme_script_dir: '/home/naoto/www/MyBlog/themes/stage/scripts/',\n  env: [Object],\n  extend: [Object],\n  config: [Object],\n  log: [Logger],\n  render: [Render],\n  route: [Router],\n  post: [Post],\n  scaffold: [Scaffold],\n  _dbLoaded: false,\n  _isGenerating: false,\n  database: [Database],\n  config_path: '/home/naoto/www/MyBlog/_config.yml',\n  source: [Source],\n  theme: [Theme],\n  locals: [Locals] }\nINFO  Start processing\nINFO  ---- START COPYING TAG CLOUD FILES ----\nINFO  ---- END COPYING TAG CLOUD FILES ----\nDate        Title                          Path\n2019-04-09  Tags                           tags/index.md\n2019-04-13  About いしだなおと / isnot N3  about/index.md\n```\n\nできた！\n\nいいね。これで行こう。\n","content":"<link crossorigin=\"anonymous\" media=\"screen\" rel=\"stylesheet\" href=\"/css/google_photos_album.css\" /><div class=\"article-gallery\"><h2 id=\"npm-linkを使いこなすには\"><a href=\"#npm-linkを使いこなすには\" class=\"headerlink\" title=\"npm linkを使いこなすには\"></a>npm linkを使いこなすには</h2><p><a href=\"https://docs.npmjs.com/cli/link.html\" target=\"_blank\" rel=\"noopener\">npm link</a>という、ありがたい仕組みがあって、非公開のモジュール（または開発中のバージョン）を、node_modulesの中に配置することができる。<br>基本的には、シンボリック・リンクである。</p>\n<p>ここまでは、すぐに把握できたけど、実はうまく動作させるための、さらなる条件があった。</p>\n<a id=\"more\"></a>\n<p>モジュールを読み込む側と、読み込まれる側のモジュールが、ファイルシステム上で同階層になるように配置されている必要があるのだった。</p>\n<p>私の場合だけど、開発中のリポジトリは、ある場所にまとめてある。<br>例：<code>~/repository/hexo-tag-google-photos-album/</code><br>これが、Hexoプラグインを開発する場所。</p>\n<p>一方で、ただ使うだけのものは、別の場所にある。<br>Hexoで構成しているブログの作業場所は、こんな感じ。<br>例：<code>~/www/MyBlog/</code></p>\n<p>つまり、自分のブログに自分のプラグインを組み込むとすると、<br>例：<code>~/www/MyBlog/node_modules/hexo-tag-google-photos-album/</code><br>ということになる。</p>\n<p>しかしながら、npm link的には、上記の2箇所を直接リンクすることはできないわけだ。</p>\n<p>なので、さらに回りくどいが、以下のようにして、解決してみる。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">naoto@MyComputer:~/www/MyBlog$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">naoto@MyComputer:~/www$ ln -s ../repository/hexo-tag-google-photos-album</span><br><span class=\"line\">naoto@MyComputer:~/www$ ls -l hexo-tag-google-photos-album</span><br><span class=\"line\">lrwxrwxrwx 1 naoto naoto 42  5月  6 01:46 hexo-tag-google-photos-album -> ../repository/hexo-tag-google-photos-album</span><br></pre></td></tr></tbody></table></figure>\n<p>こうすることで、開発中のプラグイン実体は従来通りのままとしつつ、link可能な場所にも配置できた。</p>\n<p>呼び出される側のlinkは、以下の通り。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">naoto@MyComputer:~/www$ <span class=\"built_in\">cd</span> hexo-tag-google-photos-album</span><br><span class=\"line\">naoto@MyComputer:~/www/hexo-tag-google-photos-album$ sudo npm link</span><br><span class=\"line\">(snip)</span><br><span class=\"line\">/usr/lib/node_modules/hexo-tag-google-photos-album -> /home/naoto/repository/hexo-tag-google-photos-album</span><br></pre></td></tr></tbody></table></figure>\n<p>そして、呼び出す方で使う側の、つまりブログ側の（しつこい）linkはこの通り。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">naoto@MyComputer:~/www/hexo-tag-google-photos-album$ <span class=\"built_in\">cd</span> ../MyBlog</span><br><span class=\"line\">naoto@MyComputer:~/www/MyBlog$ npm link hexo-tag-google-photos-album</span><br><span class=\"line\">/home/naoto/www/MyBlog/node_modules/hexo-tag-google-photos-album -> /usr/lib/node_modules/hexo-tag-google-photos-album -> /home/naoto/repository/hexo-tag-google-photos-album</span><br><span class=\"line\">naoto@MyComputer:~/www/MyBlog$ grep photos package.json</span><br><span class=\"line\">    <span class=\"string\">\"hexo-tag-google-photos-album\"</span>: <span class=\"string\">\"git+https://github.com/isnot/hexo-tag-google-photos-album.git\"</span>,</span><br><span class=\"line\">naoto@MyComputer:~/www/MyBlog$ ls -l node_modules/hexo-tag-google-photos-album</span><br><span class=\"line\">lrwxrwxrwx 1 naoto naoto 64  5月  6 01:50 node_modules/hexo-tag-google-photos-album -> ../../../../../usr/lib/node_modules/hexo-tag-google-photos-album</span><br></pre></td></tr></tbody></table></figure>\n<p>これで、毎度git pushとnpm upを繰り返すこと無く、作業ができるようになる（はず）。<br>確かめてみよう。</p>\n<p>開発中のプラグインの中に、以下を書き加える。</p>\n<figure class=\"highlight javascript\"><figcaption><span>~/repository/hexo-tag-google-photos-album/index.js</span></figcaption><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> { inspect } = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"built_in\">Function</span>(<span class=\"string\">'return this'</span>)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inspect(g, { <span class=\"attr\">depth</span>: <span class=\"number\">0</span> }));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inspect(hexo, { <span class=\"attr\">depth</span>: <span class=\"number\">0</span> }));</span><br></pre></td></tr></tbody></table></figure>\n<p>これを、コミットもせず、コピーもせず、動かしたい。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">naoto@MyComputer:~/www/MyBlog$ hexo list page</span><br><span class=\"line\">Object [global] {</span><br><span class=\"line\">  global: [Circular],</span><br><span class=\"line\">  process: [process],</span><br><span class=\"line\">  Buffer: [Function],</span><br><span class=\"line\">  clearImmediate: [Function: clearImmediate],</span><br><span class=\"line\">  clearInterval: [Function: clearInterval],</span><br><span class=\"line\">  clearTimeout: [Function: clearTimeout],</span><br><span class=\"line\">  setImmediate: [Function],</span><br><span class=\"line\">  setInterval: [Function: setInterval],</span><br><span class=\"line\">  setTimeout: [Function] }</span><br><span class=\"line\">Hexo {</span><br><span class=\"line\">  _events: [Object: null prototype] {},</span><br><span class=\"line\">  _eventsCount: 0,</span><br><span class=\"line\">  _maxListeners: undefined,</span><br><span class=\"line\">  base_dir: <span class=\"string\">'/home/naoto/www/MyBlog/'</span>,</span><br><span class=\"line\">  public_dir: <span class=\"string\">'/home/naoto/www/MyBlog/public/'</span>,</span><br><span class=\"line\">  source_dir: <span class=\"string\">'/home/naoto/www/MyBlog/source/'</span>,</span><br><span class=\"line\">  plugin_dir: <span class=\"string\">'/home/naoto/www/MyBlog/node_modules/'</span>,</span><br><span class=\"line\">  script_dir: <span class=\"string\">'/home/naoto/www/MyBlog/scripts/'</span>,</span><br><span class=\"line\">  scaffold_dir: <span class=\"string\">'/home/naoto/www/MyBlog/scaffolds/'</span>,</span><br><span class=\"line\">  theme_dir: <span class=\"string\">'/home/naoto/www/MyBlog/themes/stage/'</span>,</span><br><span class=\"line\">  theme_script_dir: <span class=\"string\">'/home/naoto/www/MyBlog/themes/stage/scripts/'</span>,</span><br><span class=\"line\">  env: [Object],</span><br><span class=\"line\">  extend: [Object],</span><br><span class=\"line\">  config: [Object],</span><br><span class=\"line\">  <span class=\"built_in\">log</span>: [Logger],</span><br><span class=\"line\">  render: [Render],</span><br><span class=\"line\">  route: [Router],</span><br><span class=\"line\">  post: [Post],</span><br><span class=\"line\">  scaffold: [Scaffold],</span><br><span class=\"line\">  _dbLoaded: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  _isGenerating: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  database: [Database],</span><br><span class=\"line\">  config_path: <span class=\"string\">'/home/naoto/www/MyBlog/_config.yml'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">source</span>: [Source],</span><br><span class=\"line\">  theme: [Theme],</span><br><span class=\"line\">  locals: [Locals] }</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  ---- START COPYING TAG CLOUD FILES ----</span><br><span class=\"line\">INFO  ---- END COPYING TAG CLOUD FILES ----</span><br><span class=\"line\">Date        Title                          Path</span><br><span class=\"line\">2019-04-09  Tags                           tags/index.md</span><br><span class=\"line\">2019-04-13  About いしだなおと / isnot N3  about/index.md</span><br></pre></td></tr></tbody></table></figure>\n<p>できた！</p>\n<p>いいね。これで行こう。</p>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script src=\"/js/lg-thumbnail.min.js\"></script><script src=\"/js/lg-zoom.min.js\"></script><script src=\"/js/lg-autoplay.min.js\"></script><script src=\"/js/lg-fullscreen.min.js\"></script><script src=\"/js/lg-pager.min.js\"></script><script src=\"/js/lg-hash.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('article-gallery')[0], options);\n        }</script><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script><script>\nfunction addLoadEvent(func) {\n  const oldonload = window.onload;\n  if (typeof window.onload !== 'function') {\n    window.onload = func;\n  } else {\n    window.onload = () => {\n      oldonload();\n      func();\n    };\n  }\n}\n  addLoadEvent(() => {\n    try {\n      if (window.innerWidth < Number('768')) {\n        return;\n      }\n      let imgs = Array.from(document.body.querySelectorAll('.google-photos-album-images a'));\n      imgs.push(...Array.from(document.body.querySelectorAll('a.google-photos-album-image')));\n      for (let anchor of imgs) {\n        anchor.href = anchor.href.replace(/=s720\\-no/i, '=s1920-no');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n</script>\n","title":"Hexo 内部探訪 (2) 準備 npm linkメモ","slug":"study-about-hexos-internals-2","date":"2019-05-05T15:02:00.000Z","updated":"2019-05-05T18:40:15.035Z","comments":true,"path":"2019-05/06-study-about-hexos-internals-2/","link":"","permalink":"https://pages.isnot.jp/2019-05/06-study-about-hexos-internals-2/","excerpt":"<div class=\"article-gallery\"><h2 id=\"npm-linkを使いこなすには\"><a href=\"#npm-linkを使いこなすには\" class=\"headerlink\" title=\"npm linkを使いこなすには\"></a>npm linkを使いこなすには</h2><p><a href=\"https://docs.npmjs.com/cli/link.html\" target=\"_blank\" rel=\"noopener\">npm link</a>という、ありがたい仕組みがあって、非公開のモジュール（または開発中のバージョン）を、node_modulesの中に配置することができる。<br>基本的には、シンボリック・リンクである。</p>\n<p>ここまでは、すぐに把握できたけど、実はうまく動作させるための、さらなる条件があった。</p></div>","categories":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://pages.isnot.jp/tags/hexo/"},{"name":"npm","slug":"npm","permalink":"https://pages.isnot.jp/tags/npm/"},{"name":"javascript","slug":"javascript","permalink":"https://pages.isnot.jp/tags/javascript/"}]}]